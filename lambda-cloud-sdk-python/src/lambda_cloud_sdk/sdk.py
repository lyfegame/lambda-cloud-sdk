"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from lambda_cloud_sdk import models, utils
from lambda_cloud_sdk._hooks import SDKHooks
from lambda_cloud_sdk.filesystems import Filesystems
from lambda_cloud_sdk.firewalls import Firewalls
from lambda_cloud_sdk.images import Images
from lambda_cloud_sdk.instances import Instances
from lambda_cloud_sdk.ssh_keys import SSHKeys
from lambda_cloud_sdk.types import OptionalNullable, UNSET
from typing import Callable, Dict, Optional, Union, cast
import weakref


class LambdaCloudSDK(BaseSDK):
    r"""Lambda Cloud API:
    The Lambda Cloud API provides a set of REST API endpoints you can use to create
    and manage your Lambda Cloud resources.

    # Response types and formats

    The format of each response object depends on whether the request succeeded or failed.

    ### Success responses

    When a request succeeds, the API returns a response object in the following format. `<PAYLOAD>`
    represents the endpoint-specific data object returned as part of the response object.

    ```json
    {
    \"data\": <PAYLOAD>
    }
    ```

    ### Error responses

    When a request fails, the API returns an error response object in the following format:

    ```json
    {
    \"error\": {
    \"code\": string,
    \"message\": string,
    \"suggestion\": string?
    }
    }
    ```

    - `code`: A machine- and human-readable error code specific to a particular failure mode.
    - `message`: An explanation of the error.
    - `suggestion`: When present, a suggestion for how to address the error.

    <div style=\"border: 0.075rem solid #47afe8; border-radius: .2rem; font-size: 13px;
    box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a; margin-top: 1em;\">
    <div style=\"background-color: #0489D12f; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Note</div>
    <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">When
    handling errors, avoid relying on the values of <code>message</code> or <code>suggestion</code>, as
    these values are subject to change. Instead, use the value of <code>code</code>.</div>
    </div>

    #### Provider errors

    In some cases, you might receive errors that come from upstream services/providers rather than directly
    from Lambda services. You can identify these errors by their error code prefix, `provider/`.

    Common provider errors include:

    - Network outages or connectivity issues
    - Service unavailability
    - Quota limitations or resource exhaustion

    An example of a typical service unavailability error:

    ```json
    {
    \"error\": {
    \"code\": \"provider/internal-unavailable\",
    \"message\": \"Provider unavailable\",
    \"suggestion\": \"Try again shortly\",
    }
    }
    ```

    <div class=\"divider\" part=\"operation-divider\"></div>

    # Authentication

    The Lambda Cloud API uses API keys to authenticate incoming requests. You
    can generate a new API key pair or view your existing API keys by visiting
    the
    <a href=\"/api-keys\" style=\"color: var(--highlight-primary);
    text-decoration: none\" target=\"_blank\">API keys page</a> in the Lambda Cloud
    dashboard.

    In general, Lambda recommends passing an HTTP Bearer header that contains
    your API key:

    ```http
    Authorization: Bearer <YOUR-API-KEY>
    ```

    ### Authenticating with `curl`

    The API also supports passing an HTTP Basic header. This option chiefly exists
    to support `curl`'s `-u` flag, which allows you to pass your credentials
    without having to write out the full `Authorization: Basic` header string.
    For example:

    ```bash
    curl -X GET \"https://cloud.lambda.ai/api/v1/instances\" \ 
    -H 'accept: application/json' \ 
    -u '<YOUR-API-KEY>:'
    ```

    If your use case requires it, you can also pass the HTTP Basic header directly.
    The value you pass must be a Base64-encoded string containing your API key
    and a trailing colon:

    ```http
    Authorization: Basic <BASE64-ENCODED-API-KEY-WITH-COLON>
    ```

    <div style=\"border: 0.075rem solid #E48603; border-radius: .2rem; font-size: 13px;
    box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a; margin-top: 1em;\">
    <div style=\"background-color: #E486031a; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Important</div>
    <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">If
    you make a request without including a supported <code>Authorization</code>
    header, the request will fail.</div>
    </div>


    """

    instances: Instances
    ssh_keys: SSHKeys
    filesystems: Filesystems
    images: Images
    firewalls: Firewalls

    def __init__(
        self,
        security: Optional[
            Union[models.Security, Callable[[], models.Security]]
        ] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.instances = Instances(self.sdk_configuration)
        self.ssh_keys = SSHKeys(self.sdk_configuration)
        self.filesystems = Filesystems(self.sdk_configuration)
        self.images = Images(self.sdk_configuration)
        self.firewalls = Firewalls(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
