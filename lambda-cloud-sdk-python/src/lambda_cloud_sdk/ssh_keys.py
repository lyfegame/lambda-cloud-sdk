"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from lambda_cloud_sdk import models, utils
from lambda_cloud_sdk._hooks import HookContext
from lambda_cloud_sdk.types import OptionalNullable, UNSET
from lambda_cloud_sdk.utils import get_security_from_env
from typing import Any, Mapping, Optional, Union


class SSHKeys(BaseSDK):
    def list_ssh_keys(
        self,
        *,
        security: Union[
            models.ListSSHKeysSecurity, models.ListSSHKeysSecurityTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListSSHKeysResponseBody:
        r"""List your SSH keys

        Retrieves a list of your SSH keys.

        :param security:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request(
            method="GET",
            path="/api/v1/ssh-keys",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.ListSSHKeysSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listSSHKeys",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ListSSHKeysResponseBody)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.ListSSHKeysSSHKeysResponseBodyData
            )
            raise models.ListSSHKeysSSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.ListSSHKeysSSHKeysResponseResponseBodyData
            )
            raise models.ListSSHKeysSSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_ssh_keys_async(
        self,
        *,
        security: Union[
            models.ListSSHKeysSecurity, models.ListSSHKeysSecurityTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListSSHKeysResponseBody:
        r"""List your SSH keys

        Retrieves a list of your SSH keys.

        :param security:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request_async(
            method="GET",
            path="/api/v1/ssh-keys",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.ListSSHKeysSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listSSHKeys",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ListSSHKeysResponseBody)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.ListSSHKeysSSHKeysResponseBodyData
            )
            raise models.ListSSHKeysSSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.ListSSHKeysSSHKeysResponseResponseBodyData
            )
            raise models.ListSSHKeysSSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def add_ssh_key(
        self,
        *,
        security: Union[models.AddSSHKeySecurity, models.AddSSHKeySecurityTypedDict],
        name: str,
        public_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddSSHKeyResponseBody:
        r"""Add an SSH key


        Add an SSH key to your Lambda Cloud account. You can upload an existing public
        key, or you can generate a new key pair.

        -  To use an existing key pair, set the `public_key` property in the request body
        to your public key.

        -  To generate a new key pair, omit the `public_key` property from the request
        body.

        <div style=\"border: 0.075rem solid #E48603; border-radius: .2rem; font-size: 13px;
        box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a\">
        <div style=\"background-color: #E486031a; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Important</div>
        <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">Lambda doesn't
        store your private key after it's been generated. If you generate a new key pair, make sure to save
        the resulting private key locally.</div>
        </div>

        For example, to generate a new key pair and associate it with a Lambda
        On-Demand Cloud instance:

        1. Generate the key pair. The command provided below automatically extracts and
        saves the returned private key to a new file called `key.pem`. Replace
        `<NEW-KEY-NAME>` with the name you want to assign to the SSH key:

        ```
        curl https://cloud.lambda.ai/api/v1/ssh-keys \ 
        --fail \ 
        -u ${LAMBDA_API_KEY}: \ 
        -X POST \ 
        -d '{\"name\": \"<NEW-KEY-NAME>\"}' \ 
        | jq -r '.data.private_key' > key.pem
        ```

        2. Next, set the private key's permissions to read-only:

        ```
        chmod 400 key.pem
        ```

        3. Launch a new instance. Replace `<NEW-KEY-NAME>` with the name you assigned
        to your SSH key.

        ```
        curl -X POST \"https://cloud.lambda.ai/api/v1/instance-operations/launch\" \ 
        --fail \ 
        -u ${LAMBDA_API_KEY}: \ 
        -X POST \ 
        -d '{\"region_name\":\"us-west-1\",\"instance_type_name\":\"gpu_1x_a10\",\"ssh_key_names\":[\"<NEW-KEY-NAME>\"],\"file_system_names\":[],\"quantity\":1,\"name\":\"My Instance\"}'
        ```

        4. From your local terminal, establish an SSH connection to the instance.
        Replace `<INSTANCE-IP>` with the public IP of the instance:

        ```
        ssh -i key.pem <INSTANCE-IP>
        ```


        :param security: 
        :param name: The name of the SSH key.
        :param public_key: The public key for the SSH key.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddSSHKeyRequest(
            name=name,
            public_key=public_key,
        )

        req = self._build_request(
            method="POST",
            path="/api/v1/ssh-keys",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.AddSSHKeySecurity),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AddSSHKeyRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="addSSHKey",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AddSSHKeyResponseBody)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponse400ResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponse400ResponseBody(data=response_data)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponseResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def add_ssh_key_async(
        self,
        *,
        security: Union[models.AddSSHKeySecurity, models.AddSSHKeySecurityTypedDict],
        name: str,
        public_key: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AddSSHKeyResponseBody:
        r"""Add an SSH key


        Add an SSH key to your Lambda Cloud account. You can upload an existing public
        key, or you can generate a new key pair.

        -  To use an existing key pair, set the `public_key` property in the request body
        to your public key.

        -  To generate a new key pair, omit the `public_key` property from the request
        body.

        <div style=\"border: 0.075rem solid #E48603; border-radius: .2rem; font-size: 13px;
        box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a\">
        <div style=\"background-color: #E486031a; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Important</div>
        <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">Lambda doesn't
        store your private key after it's been generated. If you generate a new key pair, make sure to save
        the resulting private key locally.</div>
        </div>

        For example, to generate a new key pair and associate it with a Lambda
        On-Demand Cloud instance:

        1. Generate the key pair. The command provided below automatically extracts and
        saves the returned private key to a new file called `key.pem`. Replace
        `<NEW-KEY-NAME>` with the name you want to assign to the SSH key:

        ```
        curl https://cloud.lambda.ai/api/v1/ssh-keys \ 
        --fail \ 
        -u ${LAMBDA_API_KEY}: \ 
        -X POST \ 
        -d '{\"name\": \"<NEW-KEY-NAME>\"}' \ 
        | jq -r '.data.private_key' > key.pem
        ```

        2. Next, set the private key's permissions to read-only:

        ```
        chmod 400 key.pem
        ```

        3. Launch a new instance. Replace `<NEW-KEY-NAME>` with the name you assigned
        to your SSH key.

        ```
        curl -X POST \"https://cloud.lambda.ai/api/v1/instance-operations/launch\" \ 
        --fail \ 
        -u ${LAMBDA_API_KEY}: \ 
        -X POST \ 
        -d '{\"region_name\":\"us-west-1\",\"instance_type_name\":\"gpu_1x_a10\",\"ssh_key_names\":[\"<NEW-KEY-NAME>\"],\"file_system_names\":[],\"quantity\":1,\"name\":\"My Instance\"}'
        ```

        4. From your local terminal, establish an SSH connection to the instance.
        Replace `<INSTANCE-IP>` with the public IP of the instance:

        ```
        ssh -i key.pem <INSTANCE-IP>
        ```


        :param security: 
        :param name: The name of the SSH key.
        :param public_key: The public key for the SSH key.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddSSHKeyRequest(
            name=name,
            public_key=public_key,
        )

        req = self._build_request_async(
            method="POST",
            path="/api/v1/ssh-keys",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.AddSSHKeySecurity),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AddSSHKeyRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="addSSHKey",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AddSSHKeyResponseBody)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponse400ResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponse400ResponseBody(data=response_data)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.AddSSHKeySSHKeysResponseResponseBodyData
            )
            raise models.AddSSHKeySSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def delete_ssh_key(
        self,
        *,
        security: Union[
            models.DeleteSSHKeySecurity, models.DeleteSSHKeySecurityTypedDict
        ],
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteSSHKeyResponseBody:
        r"""Delete an SSH key

        Deletes the specified SSH key.

        :param security:
        :param id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteSSHKeyRequest(
            id=id,
        )

        req = self._build_request(
            method="DELETE",
            path="/api/v1/ssh-keys/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.DeleteSSHKeySecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteSSHKey",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DeleteSSHKeyResponseBody)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponse400ResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponse400ResponseBody(data=response_data)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponseResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_ssh_key_async(
        self,
        *,
        security: Union[
            models.DeleteSSHKeySecurity, models.DeleteSSHKeySecurityTypedDict
        ],
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteSSHKeyResponseBody:
        r"""Delete an SSH key

        Deletes the specified SSH key.

        :param security:
        :param id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteSSHKeyRequest(
            id=id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/api/v1/ssh-keys/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.DeleteSSHKeySecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteSSHKey",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DeleteSSHKeyResponseBody)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponse400ResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponse400ResponseBody(data=response_data)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponseBody(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, models.DeleteSSHKeySSHKeysResponseResponseBodyData
            )
            raise models.DeleteSSHKeySSHKeysResponseResponseBody(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
