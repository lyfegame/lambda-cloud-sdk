"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .apierroraccountinactive import (
    APIErrorAccountInactive,
    APIErrorAccountInactiveTypedDict,
)
from .apierrorfilesysteminwrongregion import (
    APIErrorFileSystemInWrongRegion,
    APIErrorFileSystemInWrongRegionTypedDict,
)
from .apierrorinsufficientcapacity import (
    APIErrorInsufficientCapacity,
    APIErrorInsufficientCapacityTypedDict,
)
from .apierrorinvalidbillingaddress import (
    APIErrorInvalidBillingAddress,
    APIErrorInvalidBillingAddressTypedDict,
)
from .apierrorinvalidparameters import (
    APIErrorInvalidParameters,
    APIErrorInvalidParametersTypedDict,
)
from .apierrorlaunchresourcenotfound import (
    APIErrorLaunchResourceNotFound,
    APIErrorLaunchResourceNotFoundTypedDict,
)
from .apierrorquotaexceeded import APIErrorQuotaExceeded, APIErrorQuotaExceededTypedDict
from .apierrorunauthorized import APIErrorUnauthorized
from .instancelaunchresponse import (
    InstanceLaunchResponse,
    InstanceLaunchResponseTypedDict,
)
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from lambda_cloud_sdk import utils
from lambda_cloud_sdk.types import BaseModel
from lambda_cloud_sdk.utils import FieldMetadata, SecurityMetadata
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class LaunchInstanceSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    bearer_auth: NotRequired[str]


class LaunchInstanceSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    bearer_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


class LaunchInstanceInstancesResponse404ResponseBodyData(BaseModel):
    error: APIErrorLaunchResourceNotFound


class LaunchInstanceInstancesResponse404ResponseBody(Exception):
    r"""Not Found"""

    data: LaunchInstanceInstancesResponse404ResponseBodyData

    def __init__(self, data: LaunchInstanceInstancesResponse404ResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, LaunchInstanceInstancesResponse404ResponseBodyData
        )


LaunchInstanceInstancesResponseTypedDict = TypeAliasType(
    "LaunchInstanceInstancesResponseTypedDict",
    Union[APIErrorAccountInactiveTypedDict, APIErrorInvalidBillingAddressTypedDict],
)


LaunchInstanceInstancesResponse = TypeAliasType(
    "LaunchInstanceInstancesResponse",
    Union[APIErrorAccountInactive, APIErrorInvalidBillingAddress],
)


class LaunchInstanceInstancesResponseResponseBodyData(BaseModel):
    error: LaunchInstanceInstancesResponse


class LaunchInstanceInstancesResponseResponseBody(Exception):
    r"""Forbidden"""

    data: LaunchInstanceInstancesResponseResponseBodyData

    def __init__(self, data: LaunchInstanceInstancesResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, LaunchInstanceInstancesResponseResponseBodyData
        )


class LaunchInstanceInstancesResponseBodyData(BaseModel):
    error: APIErrorUnauthorized


class LaunchInstanceInstancesResponseBody(Exception):
    r"""Unauthorized"""

    data: LaunchInstanceInstancesResponseBodyData

    def __init__(self, data: LaunchInstanceInstancesResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, LaunchInstanceInstancesResponseBodyData)


LaunchInstanceResponseTypedDict = TypeAliasType(
    "LaunchInstanceResponseTypedDict",
    Union[
        APIErrorFileSystemInWrongRegionTypedDict,
        APIErrorInsufficientCapacityTypedDict,
        APIErrorInvalidParametersTypedDict,
        APIErrorLaunchResourceNotFoundTypedDict,
        APIErrorQuotaExceededTypedDict,
    ],
)


LaunchInstanceResponse = TypeAliasType(
    "LaunchInstanceResponse",
    Union[
        APIErrorFileSystemInWrongRegion,
        APIErrorInsufficientCapacity,
        APIErrorInvalidParameters,
        APIErrorLaunchResourceNotFound,
        APIErrorQuotaExceeded,
    ],
)


class LaunchInstanceInstancesResponse400ResponseBodyData(BaseModel):
    error: LaunchInstanceResponse


class LaunchInstanceInstancesResponse400ResponseBody(Exception):
    r"""Bad Request"""

    data: LaunchInstanceInstancesResponse400ResponseBodyData

    def __init__(self, data: LaunchInstanceInstancesResponse400ResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, LaunchInstanceInstancesResponse400ResponseBodyData
        )


class LaunchInstanceResponseBodyTypedDict(TypedDict):
    r"""OK"""

    data: InstanceLaunchResponseTypedDict


class LaunchInstanceResponseBody(BaseModel):
    r"""OK"""

    data: InstanceLaunchResponse
