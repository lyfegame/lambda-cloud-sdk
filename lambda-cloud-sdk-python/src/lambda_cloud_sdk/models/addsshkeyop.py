"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .apierroraccountinactive import APIErrorAccountInactive
from .apierrorinvalidparameters import APIErrorInvalidParameters
from .apierrorunauthorized import APIErrorUnauthorized
from .generatedsshkey import GeneratedSSHKey, GeneratedSSHKeyTypedDict
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .sshkey import SSHKey, SSHKeyTypedDict
from lambda_cloud_sdk import utils
from lambda_cloud_sdk.types import BaseModel
from lambda_cloud_sdk.utils import FieldMetadata, SecurityMetadata
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AddSSHKeySecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    bearer_auth: NotRequired[str]


class AddSSHKeySecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    bearer_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


class AddSSHKeySSHKeysResponseResponseBodyData(BaseModel):
    error: APIErrorAccountInactive


class AddSSHKeySSHKeysResponseResponseBody(Exception):
    r"""Forbidden"""

    data: AddSSHKeySSHKeysResponseResponseBodyData

    def __init__(self, data: AddSSHKeySSHKeysResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, AddSSHKeySSHKeysResponseResponseBodyData)


class AddSSHKeySSHKeysResponseBodyData(BaseModel):
    error: APIErrorUnauthorized


class AddSSHKeySSHKeysResponseBody(Exception):
    r"""Unauthorized"""

    data: AddSSHKeySSHKeysResponseBodyData

    def __init__(self, data: AddSSHKeySSHKeysResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, AddSSHKeySSHKeysResponseBodyData)


class AddSSHKeySSHKeysResponse400ResponseBodyData(BaseModel):
    error: APIErrorInvalidParameters


class AddSSHKeySSHKeysResponse400ResponseBody(Exception):
    r"""Bad Request"""

    data: AddSSHKeySSHKeysResponse400ResponseBodyData

    def __init__(self, data: AddSSHKeySSHKeysResponse400ResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, AddSSHKeySSHKeysResponse400ResponseBodyData
        )


ResponseTypedDict = TypeAliasType(
    "ResponseTypedDict", Union[SSHKeyTypedDict, GeneratedSSHKeyTypedDict]
)


Response = TypeAliasType("Response", Union[SSHKey, GeneratedSSHKey])


class AddSSHKeyResponseBodyTypedDict(TypedDict):
    r"""OK"""

    data: ResponseTypedDict


class AddSSHKeyResponseBody(BaseModel):
    r"""OK"""

    data: Response
